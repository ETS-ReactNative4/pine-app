// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`HomeScreen renders correctly 1`] = `
<RCTScrollView
  bounces={false}
  data={
    Array [
      Object {
        "key": "camera",
        "screen": <CameraScreen
          showPreview={false}
        />,
      },
      Object {
        "key": "transactions",
        "screen": <TransactionsScreen />,
      },
      Object {
        "key": "receive",
        "screen": <ReceiveScreen />,
      },
    ]
  }
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  getItemLayout={[Function]}
  horizontal={true}
  initialNumToRender={10}
  initialScrollIndex={1}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  numColumns={1}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  pagingEnabled={true}
  renderItem={[Function]}
  scrollEventThrottle={16}
  showsHorizontalScrollIndicator={false}
  stickyHeaderIndices={Array []}
  style={
    Object {
      "alignSelf": "stretch",
      "flex": 1,
    }
  }
  updateCellsBatchingPeriod={50}
  viewabilityConfigCallbackPairs={Array []}
  windowSize={21}
>
  <View>
    <View
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          null,
        ]
      }
    >
      <View
        style={
          Object {
            "height": 1334,
            "width": 750,
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "backgroundColor": "#ffffff",
                "flex": 1,
                "justifyContent": "center",
                "padding": 40,
              },
              Object {
                "backgroundColor": "black",
                "padding": 0,
              },
            ]
          }
        >
          <BackHeaderContainer />
          <View
            style={
              Object {
                "alignItems": "center",
                "alignSelf": "stretch",
                "flex": 1,
                "justifyContent": "center",
              }
            }
          >
            <View
              notAuthorizedView={
                <Link
                  onPress={[Function]}
                >
                  Enable Camera Access
                </Link>
              }
              onCameraReady={[Function]}
              pendingAuthorizationView={<Component />}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#000000",
                  "flex": 1,
                  "height": 1334,
                  "justifyContent": "center",
                  "position": "absolute",
                  "width": 750,
                }
              }
            />
          </View>
          <ErrorModalContainer />
        </View>
      </View>
    </View>
    <View
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          null,
        ]
      }
    >
      <View
        style={
          Object {
            "height": 1334,
            "width": 750,
          }
        }
      >
        <TransactionsScreen />
      </View>
    </View>
    <View
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          null,
        ]
      }
    >
      <View
        style={
          Object {
            "height": 1334,
            "width": 750,
          }
        }
      >
        <ReceiveScreen />
      </View>
    </View>
  </View>
</RCTScrollView>
`;
